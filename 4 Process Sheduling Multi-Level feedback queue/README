Author: Sean Clewis
Purpose: Simulated Operating System Process Scheduling
Date 3/30/2024

Description: This process is designed to simulate how an operating system schedules processes. It uses a multi-level feedback and message ques to synchronize decide which process should execute next. It also includes a blocked que to simulate an i/o interrupt

Execution: To execute these files, ensure you oss.c and worker.c are in the same directiory along with the makefile. type make to  compile the project with the included make file. 

Program execution examples: ./oss
	./oss -s 5
	./oss -s 5 -n 4 t 5 i 10 -f logfile.txt 

The parameters for this script are -h for a help menu, -s for how many processes should be executed simultaneously, -t for the time a process should run in seconds, -f for the name of the logfile, -i for the interval delay to launch processes is ms.

You can run any combination of the parameters with each other or omit them entirely. 

The default values for these parameters when simply calling ./oss is 

n = 20
s = 5
t = 5
i = 10
f = log.txt

The log file output will detail what operations the oss are performing, it is limited to 10,000 lines. The process table will output information to the screen in intervals.

The simulated time clock is not meant to be representative of the real time. As such, the simulated oss runs very quicky

Implementation: The multi-level feedback que is made using a linked list structure. We have 4 queues in total. High, medium, low, and the blocked que. The processes start in the high priority queue then move to the low. The blocked que is trigger by the simulated behavior of the worker process. After the blocked item is scheduled it returns to the high priority queue. 

NOTES: the default parameters work fine but when increasing to large process and simultaneous counts it tends to crash for some reason on the opsys server.
